/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'helpers/form_helper', 'helpers/pipeline_configs/tooltips', 'helpers/mithril_component_mixins', 'views/shared/new_modal',
  'views/pipeline_configs/repository_config_edit_widget', 'views/pipeline_configs/repository_config_new_widget',
  'models/pipeline_configs/repositories', 'models/pipeline_configs/plugin_infos'
], function (m, _, f, tt, ComponentMixins, Modal, RepositoryConfigEditWidget, RepositoryConfigNewWidget, Repositories, PluginInfos) {

  var EditRepositoryWidget = {
    controller: function (args) {
      this.material = args.material;
      this.modal    = new Modal({
        subView: {
          component: RepositoryConfigEditWidget,
          args:      {material: args.material}
        },
        title:   'Edit Repository'
      });

      this.isPluginMissing = function () {
        return _.isNil(PluginInfos.findById(this.material.repository().pluginMetadata().id()));
      };

      this.modalView = function () {
        if (!this.isPluginMissing()) {
          return this.modal.view();
        }
      };
    },

    view: function (ctrl) {
      ctrl.onunload = function () {
        ctrl.modal.destroy();
      };

      var repository = ctrl.material.repository();
      var data       = {Name: repository.name(), Plugin: PluginInfos.findById(repository.pluginMetadata().id()).name()};

      repository.configuration().mapConfigurations(function (conf) {
        data[_.capitalize(conf.key())] = conf.isSecureValue() ? "***********" : conf.value();
      });

      var editButton = ctrl.isPluginMissing() ? (
        <f.alert><b>{repository.pluginMetadata().id()}</b> plugin seems to be removed.</f.alert>)
        : (<f.editButton class={null} onclick={ctrl.modal.open.bind(ctrl.modal)}/>);

      return (
        <div>
          <div class='repository'>
            {editButton}
            <f.row>
              <ul>
                {_.map(data, function (v, k) {
                  return (
                    <li>
                      <label class={_.toLower(k)}>{k}</label><span>{v}</span>
                    </li>
                  );
                })}
              </ul>
            </f.row>
          </div>
          {ctrl.modalView()}
        </div>
      );
    }
  };

  var NewRepositoryWidget = {
    controller: function (args) {
      var createRepositoryOnSuccess = function (vm, repository) {
        vm.saveSuccess();
        args.material.repository(repository);
        Repositories.init();
      };

      var createRepositoryOnFailure = function (vm, repoForEdit, data) {
        vm.saveFailed(data);
        if (data.data) {
          repoForEdit().reInitialize(data.data);
        }
      };

      var repositoryConfigurations = function (pluginId) {
        return PluginInfos.PluginInfo.byId(pluginId).then(function (pluginInfo) {
          var allConfigurations        = pluginInfo.configurations();
          var repositoryConfigurations = _.filter(allConfigurations, function (configuration) {
            return configuration.type === 'repository';
          });
          return initializeRepository(pluginInfo, repositoryConfigurations);
        });
      };

      var initializeRepository = function (pluginInfo, configurations) {
        return new Repositories.Repository({
          plugin_metadata: {
            id:      pluginInfo.id(),
            version: pluginInfo.version()
          },
          configuration:   configProperties(configurations)
        });
      };

      var configProperties = function (configurations) {
        var config = [];
        _.map(configurations, function (configuration) {
          return config.push({key: configuration.key});
        });
        return config;
      };

      var pluginInfo = _.head(PluginInfos.filterByType('package-repository'));

      var ctrl = {
            material:     args.material,
            //repositories: Repositories,
            create: function () {
              var plugin       = m.prop(pluginInfo.id());
              var repoForEdit  = repositoryConfigurations(pluginInfo.id());
              var vm           = new Repositories.vm();
              var selectPlugin = function () {
                repoForEdit = repositoryConfigurations(this.plugin.id());
              };
              var modal        = new Modal({
                size:    'small',
                title:   'Add Repository',
                body:    (<RepositoryConfigNewWidget material={args.material}
                                                     repoForEdit={repoForEdit}
                                                     vm={vm}
                                                     plugin={plugin}/>),
                onclose: function () {
                  plugin(pluginInfo.id());
                  //ctrl.repoForEdit().reInitialize({});
                  repoForEdit = repositoryConfigurations(pluginInfo.id());
                  vm.reset();
                  modal.destroy();
                },
                buttons: [
                  {
                    text:    'Save',
                    class:   'save primary',
                    onclick: function () {
                      vm.startUpdating();
                      repoForEdit().create().then(createRepositoryOnSuccess.bind(this, vm), createRepositoryOnFailure.bind(this, vm, repoForEdit));
                      modal.destroy();
                    }
                  }
                ]
              });
              modal.render();
            }

          }
        ;
      return ctrl;
    },

    view: function (ctrl, args) {
      return (
        <f.row class='repo-selector'>
          <f.column class='no-repo' size={4} largeSize={6} end>
            {_.isEmpty(Repositories()) ?
              <div>
                <label>No repositories available.</label> <a class='add-button button' href="javascript:void(0)"
                                                             onclick={ctrl.create}>Create New Repository</a></div>
              : <a class='add-button button' href="javascript:void(0)"
                   onclick={ctrl.create}/>}

          </f.column>
        </f.row>
      );
    }
  };

  var SelectRepositoryWidget = {
    controller: function (args) {

      Repositories.findById(args.defaultRepoId()).then(function (repository) {
        args.material.repository(repository);
      });

      var ctrl = {
        selectRepository: function (id) {
          Repositories.findById(id).then(function (repository) {
            args.material.repository(repository);
          });
        }
      };
      return ctrl;
    },

    view: function (ctrl, args) {
      var items = _.transform(Repositories(), function (result, value) {
        result[value.id()] = value.name();
      }, {});

      return (
        <f.row class='repo-selector'>
          <f.select
            value={args.defaultRepoId}
            items={items}
            size={6}
            largeSize={2}
            onchange={ctrl.selectRepository.bind(ctrl, args.defaultRepoId())}
          />
        </f.row>
      )
    }
  };

  var RepositoryWidget = {
    controller: function (args) {
      return {
        defaultRepoId: function () {
          return _.isNil(args.material.repository()) ? _.head(Repositories()).id : args.material.repository().id;
        }
      };
    },
    view:       function (ctrl, args) {
      return (
        <div>
          <NewRepositoryWidget material={args.material}/>
          {!_.isNil(args.material.repository()) || !_.isEmpty(Repositories()) ?
            <SelectRepositoryWidget material={args.material} defaultRepoId={ctrl.defaultRepoId()}/> : ''}
          {_.isNil(args.material.repository()) ? '' : ''}
        </div>
      );
    }
  };
  return RepositoryWidget;
});