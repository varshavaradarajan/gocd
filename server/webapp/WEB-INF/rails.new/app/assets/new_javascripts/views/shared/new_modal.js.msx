/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'lodash', 'jquery', 'helpers/form_helper'], function (m, _, $, f) {
  var $body = $('body');

  var defaultOptions = {
    title:   'This is the title',
    body:    (<small>This is the body</small>),
    size:    'tiny',
    buttons: [
      {
        text:     'OK',
        onclick:  _.noop(),
        disabled: _.identity(false)
      },
    ],
    onclose: _.noop()
  };

  var Modal = function (options) {
    var $modalParent;

    options = _.assign({}, defaultOptions, options);

    var modalDialog = {
      controller: function () {
        this.close = function (onclose, destroy, e) {
          if (onclose) {
            onclose(e);
          }

          if (!e.defaultPrevented) {
            destroy();
          }
        };
      },

      view: function (ctrl, args) {
        return (
          <div class={"reveal-overlay " + options.class} style={{display: 'block'}}>
            <div class={'reveal ' + (options.size ? options.size : '')}
                 style={{display: 'block'}}>

              <h4 class='modal-title'>{options.title}</h4>

              <div class="modal-body">
                {options.body}
              </div>

              <button class="close-button"
                      aria-label="Close modal"
                      type="button"
                      onclick={ctrl.close.bind(ctrl, options.onclose, args.destroy)}>
                <span aria-hidden="true">&times;</span>
              </button>

              <f.row class="modal-buttons">
                <div class="columns medium-12">
                  {_.map(_.isFunction(options.buttons) ? options.buttons() : options.buttons, function (button) {
                    return (

                      <f.button disabled={button.disabled ? button.disabled() : false}
                                onclick={button.onclick}
                                class={button.class}>{button.text}</f.button>
                    );
                  })}
                </div>
              </f.row>
            </div>
          </div>
        );
      }
    };

    this.render = function () {
      $modalParent = $('<div class="modal-parent"/>').appendTo($body);
      // so you can directly access the modal in tests via `$('.modal-parent').data('modal')`
      $modalParent.data('modal', this);
      m.mount($modalParent.get(0), m.component(modalDialog, {destroy: this.destroy}));
    };

    this.destroy = function () {
      m.mount($modalParent.get(0), null);
      $modalParent.remove();
    };
  };

  return Modal;
});
