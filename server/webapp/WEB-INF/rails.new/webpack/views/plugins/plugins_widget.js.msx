/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m               = require('mithril');
const f               = require('helpers/form_helper');
const Stream          = require('mithril/stream');
const _               = require('lodash');
const Modal           = require('views/shared/new_modal');
const ComponentMixins = require('helpers/mithril_component_mixins');
const PluginWidget    = require('views/plugins/plugin_widget');

require('jquery-textcomplete');

const showErrors = (modal, ctrl, newProfile) => {
  return function (errorMessageOrProfileWithErrors) {
    if (_.isString(errorMessageOrProfileWithErrors)) {
      modal.destroy();
      ctrl.message({type: 'alert', message: errorMessageOrProfileWithErrors});
    } else {
      ctrl.clearMessage();
      newProfile(errorMessageOrProfileWithErrors);
    }
  };
};

function showSuccess(modal, ctrl, message) {
  return function () {
    modal.destroy();
    ctrl.reloadPage();
    ctrl.message({
      type: 'success',
      message
    });
  };
}

const PluginsWidget = {
  oninit (vnode) {
    const ctrl = vnode.state;
    ComponentMixins.ManagesCollection.call(this, {as: 'PluginInfo'});
    ComponentMixins.HasViewModel.call(this);

    this.message = Stream({type: undefined, message: undefined});

    this.clearMessage = function () {
      this.message({});
    };

    this.reloadPage = function () {
      //ElasticProfiles.all().then((profiles) => {
      //  ctrl.profiles(profiles);
      //}, (message) => {
      //  ctrl.message({type: 'alert', message});
      //}).always(m.redraw);
    };

    this.reloadPage();

    this.createModal = function (options) {
      const newProfile   = options.newProfile;
      const pluginInfo   = options.pluginInfo;
      const modalTitle   = options.modalTitle;
      const errorMessage = options.errorMessage;
      const callback     = options.callback || _.noop;

      const modal = new Modal({
        size:    'large',
        title:   modalTitle,
        //body:    () => (<ElasticProfileModalBody profile={newProfile}
        //                                         pluginInfos={vnode.attrs.pluginInfos}
        //                                         pluginInfo={pluginInfo}
        //                                         errorMessage={errorMessage}/>),
        onclose: () => modal.destroy(),
        buttons: [
          {
            text:    "Save",
            class:   'save primary',
            onclick: callback
          }
        ]
      });
      return modal;
    };

    this.edit = function (profile) {
      const newProfile   = Stream();
      const pluginInfo   = Stream(vnode.attrs.pluginInfos().findById(profile.pluginId()));
      const errorMessage = Stream();
      ctrl.clearMessage();

      const modal = this.createModal({
        newProfile,
        pluginInfo,
        modalTitle: `Add a new profile`,
        errorMessage,
        callback:   () => {
          newProfile().update().then(showSuccess(modal, ctrl, `The profile ${newProfile().id()} was updated successfully.`), showErrors(modal, ctrl, newProfile)).always(m.redraw);
        }
      });

      const onFulfilled = function (profileFromAjax) {
        newProfile(profileFromAjax);
        errorMessage(null);
      };
      modal.render();
      //ElasticProfiles.Profile.get(profile.id()).then(onFulfilled, errorMessage).always(m.redraw);
    };
  },

  view (vnode) {

    let errorMessage;
    if (vnode.state.message().message) {
      errorMessage = (
        <f.row>
          <f.callout type={vnode.state.message().type}>
            {vnode.state.message().message}

            <button class="close-button" aria-label="Dismiss alert" type="button"
                    onclick={vnode.state.clearMessage.bind(vnode.state)}>
              <span aria-hidden="true">&times;</span>
            </button>
          </f.callout>
        </f.row>
      );
    }

    const noPluginsInstalled = (!vnode.attrs.pluginInfos || vnode.attrs.pluginInfos().countPluginInfo() === 0);

    let noPluginsMessage;
    if (noPluginsInstalled) {
      noPluginsMessage = (
        <f.row>
          <f.callout type="info">
            No plugins are installed.
          </f.callout>
        </f.row>
      );
    }

    return (
      <div>
        <div class="header-panel">
          <header class="page-header">
            <f.row>
              <f.column size={6}>
                <h1>Plugins</h1>
              </f.column>
            </f.row>
          </header>
        </div>

        <div class="plugins">
          {noPluginsMessage}
          {errorMessage}
          <f.row>

            {vnode.attrs.pluginInfos().sortByPluginInfos((pi) => pi.id()).map((pluginInfo) => {
              return (
                <PluginWidget
                  pluginInfo={pluginInfo}
                  key={pluginInfo.id()}
                  vm={vnode.state.vmState(pluginInfo.id())}
                  onEdit={vnode.state.edit.bind(vnode.state, pluginInfo)}
                />
              );
            })}
          </f.row>
        </div>
      </div>
    );
  }
};

module.exports = PluginsWidget;
